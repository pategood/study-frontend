
例如很多dom需要添加事件(点击事件等) 如果用for循环的方法,会很大的影响性能

原因:
在JavaScript中，添加到页面上的事件处理程序数量将直接关系到页面的整体运行性能，
因为需要不断的与dom节点进行交互，访问dom的次数越多，引起浏览器重绘与重排的次数也就越多，
就会延长整个页面的交互就绪时间，这就是为什么性能优化的主要思想之一就是减少DOM操作的原因；

如果要用事件委托，就会将所有的操作放到js程序里面，与dom的操作就只需要交互一次，这样就能大大的减少与dom的交互次数，提高性能；


每个函数都是一个对象，是对象就会占用内存，对象越多，内存占用率就越大，
自然性能就越差了（内存不够用，是硬伤，哈哈），
比如上面的100个li，就要占用100个内存空间，如果是1000个，10000个呢，那只能说呵呵了，
如果用事件委托，那么我们就可以只对它的父级（如果只有一个父级）这一个对象进行操作，
这样我们就需要一个内存空间就够了，是不是省了很多，自然性能就会更好。


事件委托(代理)的原理：

事件委托是利用事件的冒泡原理来实现的，何为事件冒泡呢？
就是事件从最深的节点开始，然后逐步向上传播事件，
  举个例子：页面上有这么一个节点树，div>ul>li>a;比如给最里面的a加一个click点击事件，
    那么这个事件就会一层一层的往外执行，执行顺序a>li>ul>div，有这样一个机制，
    那么我们给最外面的div加点击事件，那么里面的ul，li，a做点击事件的时候，
    都会冒泡到最外层的div上，所以都会触发，这就是事件委托，
委托它们父级代为执行事件。



实际应用:

  <ul id="ul1">
    <li>111</li>
    <li>222</li>
    <li>333</li>
    <li>444</li>
  </ul>

  普通版本:
    实现功能是点击li，弹出123：
    window.onload = function(){
        var oUl = document.getElementById("ul1");
        var aLi = oUl.getElementsByTagName('li');
        for(var i=0;i<aLi.length;i++){
            aLi[i].onclick = function(){
                alert(123);
            }
        }
    }
  事件代理版本:
    window.onload = function(){
      var oUl = document.getElementById("ul1");
    oUl.onclick = function(){
          alert(123);
      }
  }

  改进版本:




https://www.cnblogs.com/liugang-vip/p/5616484.html